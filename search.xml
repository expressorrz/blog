<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Comparison</title>
    <url>/2023/05/26/Comparison/</url>
    <content><![CDATA[<h2 id="1-Reinforcement-Leanring-and-Branch-and-Bound"><a href="#1-Reinforcement-Leanring-and-Branch-and-Bound" class="headerlink" title="1. Reinforcement Leanring and Branch and Bound"></a>1. Reinforcement Leanring and Branch and Bound</h2><p>Reinforcement Learning (RL) and Branch and Bound (BB) are two distinct optimization techniques used in different domains. RL is a type of machine learning in which an agent learns to take actions in an environment to maximize a cumulative reward signal. On the other hand, BB is an algorithmic approach to solve optimization problems by iteratively partitioning the search space into smaller subproblems.</p>
<p>One key difference between RL and BB is that RL is a learning-based technique, whereas BB is a deterministic algorithmic approach. RL relies on the concept of trial and error, where the agent tries different actions in the environment and learns from the rewards received to adjust its policy accordingly. In contrast, BB involves partitioning the search space into smaller subproblems and recursively solving them to obtain the optimal solution.</p>
<p>Another key difference is the type of problems they are best suited for. RL is particularly useful in problems where there is a large state space, and the optimal policy is not known in advance. RL has been successfully applied in various domains, such as game playing, robotics, and autonomous driving. On the other hand, BB is better suited for problems where the search space can be partitioned into smaller subproblems, and the objective function is known. BB has been used in optimization problems such as linear programming, mixed-integer programming, and constraint satisfaction problems.</p>
<p>In summary, while both RL and BB are optimization techniques, they differ in their approach and problem domain. RL is a learning-based approach that works well in problems with large state spaces, while BB is an algorithmic approach that works well in problems where the search space can be partitioned into smaller subproblems.</p>
<hr>
<p>Reinforcement Learning (RL) and Branch and Bound (BB) have their own advantages and disadvantages, which depend on the specific problem being addressed. Here are some of the key advantages and disadvantages of each:</p>
<p>Advantages of Reinforcement Learning:</p>
<p>Adaptable: RL can adapt to changing environments and learn optimal policies through experience.</p>
<p>Generalizable: RL can be applied to a wide range of problem domains, including robotics, game playing, and recommendation systems.</p>
<p>Scalable: RL can be applied to problems with large state and action spaces.</p>
<p>Disadvantages of Reinforcement Learning:</p>
<p>Data-intensive: RL requires large amounts of training data to learn optimal policies, which can be time-consuming and expensive to collect.</p>
<p>High variance: RL algorithms can have high variance in their performance, meaning that their results may vary significantly with different random seeds or initial conditions.</p>
<p>Exploration-exploitation tradeoff: RL algorithms need to balance between exploring the environment to learn new things and exploiting what they already know to maximize rewards. Finding the right balance can be challenging.</p>
<p>Advantages of Branch and Bound:</p>
<p>Guaranteed optimality: BB can guarantee finding the optimal solution for certain classes of optimization problems.</p>
<p>Efficient: BB can be highly efficient for problems where the search space can be partitioned into smaller subproblems.</p>
<p>Robust: BB can handle problems with nonlinear objective functions and nonlinear constraints.</p>
<p>Disadvantages of Branch and Bound:</p>
<p>Combinatorial explosion: BB can suffer from combinatorial explosion as the number of subproblems grows exponentially with the problem size.</p>
<p>Requires problem-specific knowledge: BB requires knowledge of the problem structure to efficiently partition the search space into subproblems.</p>
<p>Not scalable to large problems: BB may not be scalable to very large optimization problems due to the exponential growth of the search space.</p>
<p>In summary, RL and BB have their own strengths and weaknesses, and the choice of which technique to use depends on the specific problem being addressed. RL is well-suited to problems with large state and action spaces that require adaptation and generalization, while BB is better suited to optimization problems that can be efficiently partitioned into smaller subproblems and require guaranteed optimality.</p>
]]></content>
      <tags>
        <tag>optimization</tag>
        <tag>B&amp;B</tag>
        <tag>RL</tag>
      </tags>
  </entry>
  <entry>
    <title>Convolutional Neural Networks (CNN)</title>
    <url>/2023/05/26/Convolutional-Neural-Networks-CNN/</url>
    <content><![CDATA[<h1 id="1-CNN"><a href="#1-CNN" class="headerlink" title="1 CNN"></a>1 CNN</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>卷积神经网络（Convolutional Neural Networks, CNNs）是一种深度学习模型，具有以下优点：</p>
<ol>
<li>对于图像和视频等二维数据，CNNs具有很强的特征提取能力，可以从原始数据中自动学习出具有高层次抽象特征的表示。这些特征对于图像分类、物体检测、图像分割等任务非常有用。</li>
<li>CNNs的卷积操作可以对输入数据进行参数共享，减少了模型参数数量，降低了过拟合的风险。</li>
<li>CNNs可以通过池化层对特征图进行下采样，减小特征图的尺寸和数量，进一步降低了模型的计算复杂度。</li>
<li>CNNs可以通过堆叠多个卷积层和池化层来构建深层网络结构，这些网络可以自动学习出更复杂、更高层次的特征表示，从而提高了模型的分类和识别能力。</li>
<li>对于时序数据，CNNs可以通过卷积操作和池化操作来提取时间序列数据中的重要特征，适用于语音识别、自然语言处理等任务。</li>
</ol>
<p>总之，CNNs是一种功能强大的深度学习模型，在计算机视觉、自然语言处理和语音识别等领域都取得了非常出色的表现。</p>
<h2 id="1-2-计算公式"><a href="#1-2-计算公式" class="headerlink" title="1.2 计算公式"></a>1.2 计算公式</h2><p>卷积神经网络（Convolutional Neural Network, CNN）是一种广泛应用于计算机视觉领域的深度学习模型。它是一种前向传递的神经网络，其中卷积层是其核心组成部分，该层对输入数据进行卷积操作以提取其特征。下面，我们将对卷积层的公式进行推导。</p>
<p>假设我们有一个输入数据 $x$，它是一个形状为 $(C_{in}, H_{in}, W_{in})$ 的三维张量，其中 $C_{in}$ 表示输入数据的通道数，$H_{in}$ 和 $W_{in}$ 表示输入数据的高度和宽度。我们还有一个大小为 $(C_{out}, C_{in}, K, K)$ 的卷积核 $w$，其中 $C_{out}$ 表示卷积核的通道数，$K$ 表示卷积核的大小。</p>
<p>在卷积层中，我们将卷积核与输入数据进行卷积操作，得到一个形状为 $(C_{out}, H_{out}, W_{out})$ 的输出数据 $y$，其中 $H_{out}$ 和 $W_{out}$ 表示输出数据的高度和宽度。输出数据的计算公式如下：</p>
<p>$$y_{c,i,j} &#x3D; \sum_{p&#x3D;0}^{K-1}\sum_{q&#x3D;0}^{K-1}\sum_{k&#x3D;0}^{C_{in}-1}w_{c,k,p,q}x_{k,i+p,j+q}+b_c$$</p>
<p>其中，$y_{c,i,j}$ 表示输出数据在第 $c$ 个通道、第 $i$ 行、第 $j$ 列的值，$w_{c,k,p,q}$ 表示卷积核在第 $c$ 个通道、第 $k$ 个通道、第 $p$ 行、第 $q$ 列的值，$x_{k,i+p,j+q}$ 表示输入数据在第 $k$ 个通道、第 $i+p$ 行、第 $j+q$ 列的值，$b_c$ 表示偏置项。</p>
<p>在卷积操作过程中，我们通常会对输入数据进行边界填充（Padding）和步长（Stride）操作。边界填充可以在输入数据的周围添加一圈值为零的像素，以便在进行卷积操作时保留输入数据的边界信息。步长可以控制卷积核在输入数据上的滑动速度，从而控制输出数据的大小。假设我们的边界填充大小为 $P$，步长大小为 $S$，则输出数据的大小可以通过以下公式计算：</p>
<p>$$H_{out} &#x3D; \lfloor \frac{H_{in} - K + 2P}{S} \rfloor + 1$$</p>
<h2 id="1-3-BN层的作用"><a href="#1-3-BN层的作用" class="headerlink" title="1.3 BN层的作用"></a>1.3 BN层的作用</h2><p>Batch normalization is a technique used in deep learning models, particularly in convolutional neural networks (CNNs), to normalize the input to each activation layer, typically before the activation function is applied. The batch normalization layer is usually inserted between the convolutional layer and the activation layer. The purpose of batch normalization is to improve the training stability of the neural network by reducing internal covariate shift, which is a phenomenon that occurs when the distribution of the output of one layer changes as the distribution of the input to the layer changes during training.</p>
<p>The batch normalization layer normalizes the activations of each layer in a mini-batch, which is a small subset of the training data that is processed together in a single forward or backward pass through the network. Specifically, the batch normalization layer computes the mean and variance of the activations over the mini-batch, and then applies a linear transformation and a scaling operation to the normalized activations. The mean and variance are estimated using the mini-batch statistics, which are updated during training.</p>
<p>By normalizing the activations, batch normalization reduces the dependence of the gradients on the scale of the parameters, which can speed up convergence during training. It also regularizes the network by adding noise to the activations, which can reduce overfitting. Overall, batch normalization has been shown to be an effective technique for improving the performance of deep neural networks, particularly in computer vision tasks.</p>
<h2 id="1-4-Flatten"><a href="#1-4-Flatten" class="headerlink" title="1.4 Flatten"></a>1.4 Flatten</h2><p>In a Convolutional Neural Network (CNN), the “flatten” operation refers to the process of converting the multi-dimensional feature maps obtained from the convolutional and pooling layers into a one-dimensional vector that can be fed into a fully connected neural network layer.</p>
<p>In more technical terms, after the convolutional and pooling layers, the feature maps are typically represented as a 3D tensor, with dimensions (height, width, depth). The “flatten” operation then reshapes this 3D tensor into a 1D vector of size (height x width x depth), which can be used as the input to a fully connected layer.</p>
<p>The purpose of flattening is to transform the spatially organized feature maps into a linear structure that can be processed by a traditional fully connected neural network layer. This allows the network to learn complex relationships between the extracted features and the target outputs, leading to better accuracy in classification or regression tasks.</p>
<p>Overall, the “flatten” operation is an essential step in the design of CNNs, as it enables the integration of both convolutional and fully connected layers to achieve powerful deep learning models.</p>
<h1 id="2-MSCNN"><a href="#2-MSCNN" class="headerlink" title="2 MSCNN"></a>2 MSCNN</h1><h2 id="2-1-原理"><a href="#2-1-原理" class="headerlink" title="2.1 原理"></a>2.1 原理</h2><p>MSCNN是一种用于图像分类的深度卷积神经网络，其计算表达式如下：</p>
<ol>
<li>输入层：将输入图像转换为一个三维张量，其中第一维表示图像的高度，第二维表示图像的宽度，第三维表示图像的颜色通道数（如RGB图像为3，灰度图像为1）。</li>
<li>卷积层：使用多个卷积核对输入张量进行卷积操作，生成多个特征图。每个卷积核的大小为k_h x k_w x k_c，其中k_h、k_w分别表示卷积核的高度和宽度，k_c表示卷积核的深度（即与输入张量的颜色通道数相同）。对于每个卷积核，将其与输入张量进行卷积操作，并加上一个偏置项，得到一个特征图。卷积操作采用的步长为s，通常使用0填充保持特征图大小不变。假设有n个卷积核，那么卷积层的输出为一个n x h_out x w_out的三维张量，其中h_out和w_out分别表示特征图的高度和宽度。</li>
<li>ReLU层：对卷积层的输出进行ReLU激活函数操作，即将所有小于0的值替换为0，保持所有大于等于0的值不变。</li>
<li>池化层：对ReLU层的输出进行下采样操作，通常使用最大池化或平均池化。最大池化将每个特征图分成若干个不重叠的区域，对每个区域取最大值作为输出；平均池化则取每个区域的平均值作为输出。池化操作的大小为p_h x p_w，其中p_h、p_w分别表示池化区域的高度和宽度。池化操作采用的步长为s，通常不使用填充。假设采用最大池化，那么池化层的输出为一个n x h_pool x w_pool的三维张量，其中h_pool和w_pool分别表示下采样后的特征图的高度和宽度。</li>
<li>全连接层：将池化层的输出展开为一个一维向量，并与一个权重矩阵相乘，再加上一个偏置项，得到一个向量。将该向量作为全连接层的输入，再进行ReLU激活函数操作，得到输出向量。全连接层通常用于将卷积层提取的特征映射到类别空间。</li>
<li>Softmax层：对全连接层的输出进行softmax操作，将输出向量映射到类别概率分布上</li>
</ol>
<h2 id="2-2-公式"><a href="#2-2-公式" class="headerlink" title="2.2 公式"></a>2.2 公式</h2><p>具体来说，MSCNN的计算表达式可以用以下公式表示：</p>
<h3 id="2-2-1-输入层"><a href="#2-2-1-输入层" class="headerlink" title="2.2.1 输入层"></a>2.2.1 输入层</h3><p>$$X\in \mathbb{R}^{H\times W\times C}$$</p>
<p>其中$H$表示输入图像的高度，$W$表示输入图像的宽度，$C$表示输入图像的颜色通道数。</p>
<h3 id="2-2-2-卷积层"><a href="#2-2-2-卷积层" class="headerlink" title="2.2.2 卷积层"></a>2.2.2 卷积层</h3><p>$$Z_{i,j,k} &#x3D; \sum_{u&#x3D;0}^{k_h-1}\sum_{v&#x3D;0}^{k_w-1}\sum_{c&#x3D;0}^{k_c-1}w_{u,v,c,i,k}X_{s_h\times i+u,s_w\times j+v,c}+b_i$$</p>
<p>其中$Z_{i,j,k}$表示第$i$个卷积核在位置$(j,k)$的特征图值，$w_{u,v,c,i,k}$表示第$i$个卷积核在位置$(u,v,c)$的权重值，$b_i$表示第$i$个卷积核的偏置项，$s_h$和$s_w$分别表示卷积核的垂直和水平步长。</p>
<h3 id="2-2-3-ReLU层"><a href="#2-2-3-ReLU层" class="headerlink" title="2.2.3 ReLU层"></a>2.2.3 ReLU层</h3><p>$$Y_{i,j,k} &#x3D; \max(0,Z_{i,j,k})$$</p>
<p>其中$Y_{i,j,k}$表示ReLU层在位置$(j,k)$的输出值。</p>
<h3 id="2-2-4-池化层"><a href="#2-2-4-池化层" class="headerlink" title="2.2.4 池化层"></a>2.2.4 池化层</h3><p>$$O_{i,j,k} &#x3D; \frac{1}{p_h\times p_w}\max_{u&#x3D;0}^{p_h-1}\max_{v&#x3D;0}^{p_w-1}Y_{i,s_h\times j+u,s_w\times k+v}$$</p>
<p>其中$O_{i,j,k}$表示最大池化层在位置$(j,k)$的输出值，$p_h$和$p_w$分别表示池化区域的垂直和水平大小。</p>
<h3 id="2-2-5-全连接层"><a href="#2-2-5-全连接层" class="headerlink" title="2.2.5 全连接层"></a>2.2.5 全连接层</h3><p>$$U &#x3D; \text{flatten}(O)$$</p>
<p>$$V &#x3D; \max(0,WU+b)$$</p>
<p>其中$U$表示池化层的输出向量，$\text{flatten}(\cdot)$表示将张量展开为一维向量，$W$表示全连接层的权重矩阵，$b$表示全连接层的偏置项，$V$表示全连接层的输出向量。</p>
<h3 id="2-2-6-Softmax层"><a href="#2-2-6-Softmax层" class="headerlink" title="2.2.6 Softmax层"></a>2.2.6 Softmax层</h3><p>$$P_k &#x3D; \frac{\exp(v_k)}{\sum_{j&#x3D;1}^{K}\exp(v_j)}$$</p>
<p>其中$P_k$表示第$k$个类别的概率值，$v_k$表示全连接层输出向量的第$k$个元素。$K$表示总共的类别数目。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
        <tag>concept</tag>
        <tag>cnn</tag>
      </tags>
  </entry>
  <entry>
    <title>Edge Computing</title>
    <url>/2023/05/26/Edge-Computing/</url>
    <content><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><p>“<em>边缘计算是为应用开发者和服务提供商在网络的边缘侧提供云服务和IT环境服务；目标是在靠近数据输入或用户的地方提供计算、存储和网络带宽”。</em></p>
<h1 id="2-意义"><a href="#2-意义" class="headerlink" title="2. 意义"></a>2. 意义</h1><p>云计算的优点：</p>
<ol>
<li>庞大的计算能力</li>
<li>海量的存储能力</li>
</ol>
<p>云计算的缺点：</p>
<ol>
<li>网络延时高</li>
<li>海量设备接入</li>
<li>海量数据处理难</li>
<li>带宽不够</li>
<li>功耗过高<br><img src="/../images/edgecomputing/1.png"><br>边缘计算的优点：</li>
</ol>
<ul>
<li>低延迟：计算能力部署在设备侧附近，设备请求实时响应；</li>
<li>低带宽运行：将工作迁移至更接近于用户或是数据采集终端的能力能够降低站点带宽限制所带来的影响。尤其是当边缘节点服务减少了向中枢发送大量数据处理的请求时。</li>
<li>隐私保护：数据本地采集，本地分析，本地处理，有效减少了数据暴露在公共网络的机会，保护了数据隐私。<br><img src="/../images/edgecomputing/2.png"></li>
</ul>
<h1 id="3-工作流程"><a href="#3-工作流程" class="headerlink" title="3. 工作流程"></a>3. 工作流程</h1><p>边缘计算架构如下图所示，尽可能靠近终端节点处处理数据，使数据、应用程序和计算能力远离集中式云计算中心。<br><img src="/../images/edgecomputing/3.png"></p>
<ul>
<li>终端节点：由各种物联网设备（如传感器、RFID标签、摄像头、智能手机等）组成，主要完成收集原始数据并上报的功能。在终端层中，只需提供各种物联网设备的感知能力，而不需要计算能力。</li>
<li>边缘计算节点：边缘计算节点通过合理部署和调配网络边缘侧节点的计算和存储能力，实现基础服务响应。</li>
<li>网络节点：负责将边缘计算节点处理后的有用数据上传至云计算节点进行分析处理。</li>
<li>云计算节点：边缘计算层的上报数据将在云计算节点进行永久性存储，同时边缘计算节点无法处理的分析任务和综合全局信息的处理任务仍旧需要在云计算节点完成。除此之外，云计算节点还可以根据网络资源分布动态调整边缘计算层的部署策略和算法。</li>
</ul>
<h1 id="4-发展方向"><a href="#4-发展方向" class="headerlink" title="4.发展方向"></a>4.发展方向</h1><p>中国工程院院士邬贺铨是推进边缘计算技术与产业繁荣发展倡议的专家之一，对边缘计算有着更加深入的思考。在近期的2018边缘计算技术峰会上，他表示，边缘计算技术应该是一个体系，但目前包括他本人都对这个体系了解只是边缘，根本没有<br>进入到核心，很多东西不太清楚，所以提出十问。</p>
<p>NO1：5G MEC（移动边缘计算）应该下沉到什么位置？边缘计算放在DU？还是CU？还是放在核心网？显然靠近底下反应越快，数量越多，放在什么位置是值得研究的。</p>
<p>NO2：计算能力是一级设置还是多级设置？在采用MEC的前提下，还要不要同时设置云计算？在云计算和MEC之间是否需要设置雾计算？一个云计算节点联接的移动边缘计算（或雾计算）节点的合理数量是多少？</p>
<p><strong>NO3：计算能力如何在云计算与边缘计算间优化配置？计算能力的分割是固定的还是可动态调整的？MEC需要向云计算节点上报过滤后的数据。云计算节点需要向MEC下发指令，除此之外两者间的通信还应有什么任务？</strong></p>
<p>NO4：MEC间通过云计算节点互通还是直接通信？同样是边缘计算节点，它们之间要不要互通，或者说必须间接互通？</p>
<p>NO5：边缘计算需要有IaaS&#x2F;PaaS&#x2F;SaaS等服务能力吗？假如通过边缘计算增强人脸识别能力，边缘计算至少具备PaaS的功能，还需要可能具有一些视频转码的功能就是SaaS，有可能需要DaaS（数据即服务）的功能，边缘计算是不是都这么全？到底需要有几层，值得研究。</p>
<p>NO6：边缘计算需要同时具备接入、转发和控制云能力吗？如果说边缘计算是放在CU，它要集中管理好多DU，是否也应该具有控制云的能力？</p>
<p>NO7：MEC应该与网络切片结合吗？网络切片是5G最基本的一个特征，边缘计算要不要结合？</p>
<p>NO8：位于C-RAN的MEC需要按业务来配置吗？不同的边缘计算对应不同的应用，有对应移动大数据，有对应大连接的，还有对应社会与互联网数据的。在这种情况下，边缘计算是按业务来配置的，将来的边缘计算也是这样吗？</p>
<p>NO9：MEC是独立设置还是应与其他功能集成？基站的边缘计算首先进行大数据的收集采集，同时实现加密，在对大数据进行消化后，它回送网络数据链应该是减少的，也就意味着对数据过滤，为了过滤，它可能需要缓存，所以，边缘计算会跟缓存数据采集，数据分析，过滤，计算能力集中在一起，边缘计算绝不是单一的计算能力。</p>
<p>NO10：MEC的功能需要软件定义吗？MEC可仿照NFV实现软件定义，允许跨过多厂家的MEC平台有效与无缝集成来自厂商、服务提供商和第三方的应用，MEC的功能会开放吗？如果开放就要有接入权限管理。</p>
]]></content>
      <categories>
        <category>Edge Computing</category>
      </categories>
      <tags>
        <tag>concept</tag>
        <tag>edge computing</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2023/05/26/Hexo/</url>
    <content><![CDATA[<p>Welcome to <strong>Expressoz</strong>! This is my first post. </p>
<h2 id="Hexo-base-operation-guide"><a href="#Hexo-base-operation-guide" class="headerlink" title="Hexo base operation guide~"></a>Hexo base operation guide~</h2><h3 id="1-Create-a-new-post"><a href="#1-Create-a-new-post" class="headerlink" title="1. Create a new post"></a>1. Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="2-Run-server"><a href="#2-Run-server" class="headerlink" title="2. Run server"></a>2. Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="3-Clean-past-files"><a href="#3-Clean-past-files" class="headerlink" title="3. Clean past files"></a>3. Clean past files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="4-Generate-static-files"><a href="#4-Generate-static-files" class="headerlink" title="4. Generate static files"></a>4. Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="5-Deploy-to-remote-sites"><a href="#5-Deploy-to-remote-sites" class="headerlink" title="5. Deploy to remote sites"></a>5. Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>fun</category>
      </categories>
      <tags>
        <tag>fun</tag>
        <tag>git</tag>
        <tag>node</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 8 Installation and how to use it</title>
    <url>/2023/05/26/MySQL-8-Installation-and-how-to-use-it/</url>
    <content><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><h3 id="1-1-Mysql下载"><a href="#1-1-Mysql下载" class="headerlink" title="1.1 Mysql下载"></a>1.1 Mysql下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/  </span><br><span class="line"></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2 解压"></a>1.2 解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.tar.gz后缀：tar -zxvf 文件名  </span><br><span class="line">.tar.xz后缀：tar -Jxvf 文件名  </span><br><span class="line">tar -Jxvf mysql-8.0.31-linux-glibc2.12-x86_64.tar.xz</span><br></pre></td></tr></table></figure>

<h3 id="1-3-重命名"><a href="#1-3-重命名" class="headerlink" title="1.3 重命名"></a>1.3 重命名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重命名  </span><br><span class="line">mv 原文件夹名 mysql8  </span><br><span class="line">mv mysql-8.0.31-linux-glibc2.12-x86_64 mysql8</span><br><span class="line"># 软链接  </span><br><span class="line">ln -s 文件夹名 mysql8</span><br></pre></td></tr></table></figure>

<h3 id="1-4-添加环境变量"><a href="#1-4-添加环境变量" class="headerlink" title="1.4 添加环境变量"></a>1.4 添加环境变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile  </span><br><span class="line">  </span><br><span class="line">添加export PATH=$PATH:/opt/mysql/mysql8/bin  </span><br><span class="line">  </span><br><span class="line">添加export PATH=$PATH:/home/cjxjy/mysql/mysql8/bin  </span><br><span class="line">  </span><br><span class="line">添加export PATH=$PATH:/home/mysql/mysql8/bin  </span><br><span class="line">  </span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="1-5-创建用户组和用户"><a href="#1-5-创建用户组和用户" class="headerlink" title="1.5 创建用户组和用户"></a>1.5 创建用户组和用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个用户组：mysql  </span><br><span class="line">groupadd mysql  </span><br><span class="line"># 创建一个系统用户：mysql，指定用户组为mysql  </span><br><span class="line">useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>

<h3 id="1-6-数据目录"><a href="#1-6-数据目录" class="headerlink" title="1.6 数据目录"></a>1.6 数据目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/mysql/mysql8/datas  </span><br><span class="line">  </span><br><span class="line">chown -R mysql:mysql /opt/mysql/mysql8/datas   </span><br><span class="line">chmod -R 750 /opt/mysql/mysql8/datas   </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">mv /home/cjxjy/mysql /opt/mysql/mysql8/datas/  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p /home/cjxjy/mysql/mysql8/datas  </span><br><span class="line">  </span><br><span class="line">chown -R root:root /home/cjxjy/mysql/mysql8/datas  </span><br><span class="line">chmod -R 750 /home/cjxjy/mysql/mysql8/datas   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p /home/mysql/mysql8/datas  </span><br><span class="line">  </span><br><span class="line">chown -R mysql:mysql /home/mysql/mysql8/datas  </span><br><span class="line">chmod -R 750 /home/mysql/mysql8/datas </span><br></pre></td></tr></table></figure>


<h3 id="1-7-配置参数"><a href="#1-7-配置参数" class="headerlink" title="1.7 配置参数"></a>1.7 配置参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /opt/mysql/mysql8/my.cnf #创建my.cnf用于初始化MySQL数据库  </span><br><span class="line">  </span><br><span class="line">vi /home/cjxjy/mysql/mysql8/my.cnf  </span><br><span class="line">  </span><br><span class="line">vi /home/mysql/mysql8/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql]  </span><br><span class="line"># 默认字符集  </span><br><span class="line">default-character-set=utf8mb4  </span><br><span class="line">[client]  </span><br><span class="line">port       = 3306  </span><br><span class="line">socket     = /tmp/mysql.sock  </span><br><span class="line">  </span><br><span class="line">[mysqld]  </span><br><span class="line">port       = 3306  </span><br><span class="line">server-id  = 3306  </span><br><span class="line">user       = mysql  </span><br><span class="line">socket     = /tmp/mysql.sock  </span><br><span class="line"># 安装目录  </span><br><span class="line">basedir    = /home/cjxjy/mysql/mysql8  </span><br><span class="line"># 数据存放目录  </span><br><span class="line">datadir    = /home/cjxjy/mysql/mysql8/datas/mysql  </span><br><span class="line">log-bin    = /home/cjxjy/mysql/mysql8/datas/mysql/mysql-bin  </span><br><span class="line">innodb_data_home_dir      =/home/cjxjy/mysql/mysql8/datas/mysql  </span><br><span class="line">innodb_log_group_home_dir =/home/cjxjy/mysql/mysql8/datas/mysql  </span><br><span class="line">#日志及进程数据的存放目录  </span><br><span class="line">log-error =/home/cjxjy/mysql/mysql8/datas/mysql/mysql.log  </span><br><span class="line">pid-file  =/home/cjxjy/mysql/mysql8/datas/mysql/mysql.pid  </span><br><span class="line"># 服务端使用的字符集默认为8比特编码  </span><br><span class="line">character-set-server=utf8mb4  </span><br><span class="line">lower_case_table_names=1  </span><br><span class="line">autocommit =1  </span><br><span class="line"></span><br><span class="line"> ##################以上要修改的########################  </span><br><span class="line">skip-external-locking  </span><br><span class="line">key_buffer_size = 256M  </span><br><span class="line">max_allowed_packet = 1M  </span><br><span class="line">table_open_cache = 1024  </span><br><span class="line">sort_buffer_size = 4M  </span><br><span class="line">net_buffer_length = 8K  </span><br><span class="line">read_buffer_size = 4M  </span><br><span class="line">read_rnd_buffer_size = 512K  </span><br><span class="line">myisam_sort_buffer_size = 64M  </span><br><span class="line">thread_cache_size = 128  </span><br><span class="line">    </span><br><span class="line">#query_cache_size = 128M  </span><br><span class="line">tmp_table_size = 128M  </span><br><span class="line">explicit_defaults_for_timestamp = true  </span><br><span class="line">max_connections = 500  </span><br><span class="line">max_connect_errors = 100  </span><br><span class="line">open_files_limit = 65535  </span><br><span class="line">     </span><br><span class="line">binlog_format=mixed  </span><br><span class="line">      </span><br><span class="line">binlog_expire_logs_seconds =864000  </span><br><span class="line">      </span><br><span class="line"># 创建新表时将使用的默认存储引擎  </span><br><span class="line">default_storage_engine = InnoDB  </span><br><span class="line">innodb_data_file_path = ibdata1:10M:autoextend  </span><br><span class="line">innodb_buffer_pool_size = 1024M  </span><br><span class="line">innodb_log_file_size = 256M  </span><br><span class="line">innodb_log_buffer_size = 8M  </span><br><span class="line">innodb_flush_log_at_trx_commit = 1  </span><br><span class="line">innodb_lock_wait_timeout = 50  </span><br><span class="line">transaction-isolation=READ-COMMITTED  </span><br><span class="line">        </span><br><span class="line">[mysqldump]  </span><br><span class="line">quick  </span><br><span class="line">max_allowed_packet = 256M  </span><br><span class="line">         </span><br><span class="line">[myisamchk]  </span><br><span class="line">key_buffer_size = 256M  </span><br><span class="line">sort_buffer_size = 4M  </span><br><span class="line">read_buffer = 2M  </span><br><span class="line">write_buffer = 2M  </span><br><span class="line">          </span><br><span class="line">[mysqlhotcopy]  </span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql]  </span><br><span class="line"># 默认字符集  </span><br><span class="line">default-character-set=utf8mb4  </span><br><span class="line">[client]  </span><br><span class="line">port       = 3306  </span><br><span class="line">socket     = /tmp/mysql.sock  </span><br><span class="line">  </span><br><span class="line">[mysqld]  </span><br><span class="line">port       = 3306  </span><br><span class="line">server-id  = 3306  </span><br><span class="line">user       = mysql  </span><br><span class="line">socket     = /tmp/mysql.sock  </span><br><span class="line"># 安装目录  </span><br><span class="line">basedir    = /opt/mysql/mysql8  </span><br><span class="line"># 数据存放目录  </span><br><span class="line">datadir    = /opt/mysql/mysql8/datas/mysql  </span><br><span class="line">log-bin    = /opt/mysql/mysql8/datas/mysql/mysql-bin  </span><br><span class="line">innodb_data_home_dir      =/opt/mysql/mysql8/datas/mysql  </span><br><span class="line">innodb_log_group_home_dir =/opt/mysql/mysql8/datas/mysql  </span><br><span class="line">#日志及进程数据的存放目录  </span><br><span class="line">log-error =/opt/mysql/mysql8/datas/mysql/mysql.log  </span><br><span class="line">pid-file  =/opt/mysql/mysql8/datas/mysql/mysql.pid  </span><br><span class="line"># 服务端使用的字符集默认为8比特编码  </span><br><span class="line">character-set-server=utf8mb4  </span><br><span class="line">lower_case_table_names=1  </span><br><span class="line">autocommit =1  </span><br><span class="line"></span><br><span class="line"> ##################以上要修改的########################  </span><br><span class="line">skip-external-locking  </span><br><span class="line">key_buffer_size = 256M  </span><br><span class="line">max_allowed_packet = 1M  </span><br><span class="line">table_open_cache = 1024  </span><br><span class="line">sort_buffer_size = 4M  </span><br><span class="line">net_buffer_length = 8K  </span><br><span class="line">read_buffer_size = 4M  </span><br><span class="line">read_rnd_buffer_size = 512K  </span><br><span class="line">myisam_sort_buffer_size = 64M  </span><br><span class="line">thread_cache_size = 128  </span><br><span class="line">    </span><br><span class="line">#query_cache_size = 128M  </span><br><span class="line">tmp_table_size = 128M  </span><br><span class="line">explicit_defaults_for_timestamp = true  </span><br><span class="line">max_connections = 500  </span><br><span class="line">max_connect_errors = 100  </span><br><span class="line">open_files_limit = 65535  </span><br><span class="line">     </span><br><span class="line">binlog_format=mixed  </span><br><span class="line">      </span><br><span class="line">binlog_expire_logs_seconds =864000  </span><br><span class="line">      </span><br><span class="line"># 创建新表时将使用的默认存储引擎  </span><br><span class="line">default_storage_engine = InnoDB  </span><br><span class="line">innodb_data_file_path = ibdata1:10M:autoextend  </span><br><span class="line">innodb_buffer_pool_size = 1024M  </span><br><span class="line">innodb_log_file_size = 256M  </span><br><span class="line">innodb_log_buffer_size = 8M  </span><br><span class="line">innodb_flush_log_at_trx_commit = 1  </span><br><span class="line">innodb_lock_wait_timeout = 50  </span><br><span class="line">transaction-isolation=READ-COMMITTED  </span><br><span class="line">        </span><br><span class="line">[mysqldump]  </span><br><span class="line">quick  </span><br><span class="line">max_allowed_packet = 256M  </span><br><span class="line">         </span><br><span class="line">[myisamchk]  </span><br><span class="line">key_buffer_size = 256M  </span><br><span class="line">sort_buffer_size = 4M  </span><br><span class="line">read_buffer = 2M  </span><br><span class="line">write_buffer = 2M  </span><br><span class="line">          </span><br><span class="line">[mysqlhotcopy]  </span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure>

<h3 id="1-8-初始化"><a href="#1-8-初始化" class="headerlink" title="1.8 初始化"></a>1.8 初始化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --defaults-file=/opt/mysql/mysql8/my.cnf --basedir=/opt/mysql/mysql8/ --datadir=/opt/mysql/mysql8/datas/mysql --user=mysql --initialize-insecure  </span><br><span class="line">  </span><br><span class="line">mysqld --defaults-file=/home/cjxjy/mysql/mysql8/my.cnf --basedir=/home/cjxjy/mysql/mysql8/ --datadir=/home/cjxjy/mysql/mysql8/datas/mysql --user=root --initialize-insecure  </span><br><span class="line">  </span><br><span class="line">mysqld --defaults-file=/home/mysql/mysql8/my.cnf --basedir=/home/mysql/mysql8/ --datadir=/home/mysql/mysql8/datas/mysql --user=mysql --initialize-insecure</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>defaults-file</code>：指定配置文件（要放在–initialize 前面）</p>
</li>
<li><p><code>user</code>： 指定用户</p>
</li>
<li><p><code>basedir</code>：指定安装目录</p>
</li>
<li><p><code>datadir</code>：指定初始化数据目录</p>
</li>
<li><p><code>intialize-insecure</code>：初始化无密码</p>
</li>
</ul>
<h3 id="1-9-启动服务"><a href="#1-9-启动服务" class="headerlink" title="1.9 启动服务"></a>1.9 启动服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 完整命令  </span><br><span class="line">/home/cjxjy/mysql/mysql8/bin/mysqld_safe --defaults-file=/home/cjxjy/mysql/mysql8/my.cnf &amp;  </span><br><span class="line">mysqld_safe --defaults-file=/home/cjxjy/mysql/mysql8/my.cnf   </span><br><span class="line"># 添加PATH变量后的命令（省略bin目录的路径）  </span><br><span class="line">  </span><br><span class="line">/opt/mysql/mysql8/bin/mysqld_safe --defaults-file=/opt/mysql/mysql8/my.cnf &amp;  </span><br><span class="line">mysqld_safe --defaults-file=/opt/mysql/mysql8/my.cnf  </span><br><span class="line">  </span><br><span class="line">/home/mysql/mysql8/bin/mysqld_safe --defaults-file=/home/mysql/mysql8/my.cnf &amp; mysqld_safe --defaults-file=/home/mysql/mysql8/my.cnf   </span><br><span class="line">  </span><br><span class="line">#查看是否启动  </span><br><span class="line">ps -ef|grep mysql  </span><br><span class="line">  </span><br><span class="line">/opt/mysql/mysql8/bin/mysql -u root --skip-password  </span><br><span class="line">  </span><br><span class="line">/home/cjxjy/mysql/mysql8/bin/mysql -u root --skip-password  </span><br><span class="line">  </span><br><span class="line">/home/mysql/mysql8/bin/mysql -u root --skip-password  </span><br><span class="line">  </span><br><span class="line">#修改密码  </span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;zhongruirui_216&#x27;;  </span><br><span class="line">  </span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;MMI#admin@2021&#x27;;  </span><br></pre></td></tr></table></figure>


<h3 id="1-10-Mysql权限设置"><a href="#1-10-Mysql权限设置" class="headerlink" title="1.10 Mysql权限设置"></a>1.10 Mysql权限设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### 1.查看权限</span><br><span class="line"></span><br><span class="line">select host, user, authentication_string, plugin from user;  </span><br><span class="line">select host, user, authentication_string from user;</span><br><span class="line"></span><br><span class="line">#### 2.授予有root权限的所有IP地址访问</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;cjxjy&#x27;@&#x27;LOCALHOST&#x27; IDENTIFIED BY &#x27;MMI#admin@2021&#x27;;  </span><br><span class="line">  </span><br><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;  </span><br><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;cjxjy&#x27;;  </span><br><span class="line">  </span><br><span class="line">GRANT all privileges ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;MMI#admin@2021&#x27; with grant option;  </span><br><span class="line">GRANT ALL ON *.* TO &#x27;cjxjy&#x27;@&#x27;%&#x27;;  </span><br><span class="line">  </span><br><span class="line">GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">#### 3.授予指定IP地址权限</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to root@10.31.46.124 identified by &#x27;MMI#admin@2021&#x27;;  </span><br><span class="line">  </span><br><span class="line">grant all privileges on *.* to root@172.17.0.2 identified by &#x27;MMI#admin@2021&#x27;;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">grant all privileges on *.* to root@10.31.46.31 identified by &#x27;MMI#admin@2021&#x27;;</span><br><span class="line"></span><br><span class="line">create user &#x27;test&#x27;@172.17.0.2 identified by &#x27;123456&#x27;;  </span><br><span class="line">create user &#x27;root&#x27;@10.31.46.31 identified by &#x27;MMI#admin@2021&#x27;;  </span><br><span class="line">  </span><br><span class="line">grant all privileges on *.* to &#x27;test&#x27;@172.17.0.2 with grant option;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4.修改对应权限的密码</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;zhongruirui_216&#x27;;   </span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;z123456&#x27;;  </span><br><span class="line">  </span><br><span class="line">ALTER USER &#x27;cjxjy&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;MMI#admin@2021&#x27;;   </span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;MMI#admin@2021&#x27;;  </span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;10.31.46.31&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;MMI#admin@2021&#x27;;  </span><br><span class="line">  </span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">#### 5.删除</span><br></pre></td></tr></table></figure>

<h2 id="2-常见报错"><a href="#2-常见报错" class="headerlink" title="2. 常见报错"></a>2. 常见报错</h2><h3 id="2-1-Failed-to-start-LSB-start-and-stop-MySQL"><a href="#2-1-Failed-to-start-LSB-start-and-stop-MySQL" class="headerlink" title="2.1 Failed to start LSB start and stop MySQL"></a>2.1 Failed to start LSB start and stop MySQL</h3><p>可能是修改了 my.cnf 文件，修改语句有错导致</p>
<h3 id="2-2-this-is-incompatible-with-sql-mode-x3D-only-full-group-by"><a href="#2-2-this-is-incompatible-with-sql-mode-x3D-only-full-group-by" class="headerlink" title="2.2 this is incompatible with sql_mode&#x3D;only_full_group_by"></a>2.2 this is incompatible with sql_mode&#x3D;only_full_group_by</h3><p>永久修改方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]中添加语句：</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看模式</span><br><span class="line">show variables like ‘%sql_mode’;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-mysqld-safe-error-log-error-set-to-‘-x2F-var-x2F-log-x2F-mariadb-x2F-mariadb-log‘"><a href="#2-3-mysqld-safe-error-log-error-set-to-‘-x2F-var-x2F-log-x2F-mariadb-x2F-mariadb-log‘" class="headerlink" title="2.3 mysqld_safe error: log-error set to ‘&#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log‘"></a>2.3 mysqld_safe error: log-error set to ‘&#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log‘</h3><p>msyql8编译安装完成后通过&#x2F;etc&#x2F;init.d&#x2F;mysqld start 命令启动MySQL时报了以上错误，然后我就重新检查了my.cnf内容，发现缺少mysqld_safe的配置，因此增加配置如下：：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mariadb/mariadb.log</span><br><span class="line">pid-file=/var/run/mariadb/mariadb.pid</span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<p>并在对应文件夹下创建文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /var/log/mariadb     </span><br><span class="line">touch /var/log/mariadb/mariadb.log</span><br></pre></td></tr></table></figure>

<p>给指定用户授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /var/log/mariadb/</span><br></pre></td></tr></table></figure>

<p>再次启动mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<h3 id="2-4-Unit-mysqld-service-could-not-be-found"><a href="#2-4-Unit-mysqld-service-could-not-be-found" class="headerlink" title="2.4 Unit mysqld.service could not be found."></a>2.4 Unit mysqld.service could not be found.</h3><p><strong>1.问题</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 输入：</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line">service mysqld start</span><br><span class="line">service mysqld status</span><br><span class="line"># 报错Unit mysqld.service could not be found.</span><br></pre></td></tr></table></figure>

<p><strong>2.确定是否配置环境变量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/opt/mysql/mysql8/bin</span><br></pre></td></tr></table></figure>

<p><strong>3.修改启动路径</strong></p>
<p>&#x2F;opt&#x2F;mysql&#x2F;mysql8&#x2F;support-files&#x2F;mysql.server 和 &#x2F;etc&#x2F;init.d&#x2F;mysqld 中对应的basedir, datadir等有误，修改为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /opt/mysql/mysql8/support-files/mysql.server</span><br><span class="line">vi /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line"># Set some defaults</span><br><span class="line">mysqld_pid_file_path=</span><br><span class="line">if test -z &quot;$basedir&quot;</span><br><span class="line">then</span><br><span class="line">  basedir=/opt/mysql/mysql8</span><br><span class="line">  bindir=/opt/mysql/mysql8/bin</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=/opt/mysql/mysql8/datas/mysql</span><br><span class="line">  fi</span><br><span class="line">  sbindir=/opt/mysql/mysql8/bin</span><br><span class="line">  libexecdir=/opt/mysql/mysql8/bin</span><br><span class="line">else</span><br><span class="line">  bindir=&quot;$basedir/bin&quot;</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=&quot;$basedir/data&quot;</span><br><span class="line">  fi</span><br><span class="line">  sbindir=&quot;$basedir/sbin&quot;</span><br><span class="line">  libexecdir=&quot;$basedir/libexec&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>4.配置systemctl管理mysql需要在&#x2F;etc&#x2F;init.d下布置mysqld</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /opt/mysql/mysql8/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/mysqld # 赋予权限</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/database_name_here/wordpress/&#x27; /var/www/html/wp-blog/wp-config.php</span><br><span class="line">sed -i &#x27;s/username_here/root/&#x27; /var/www/html/wp-blog/wp-config.php</span><br><span class="line">sed -i &#x27;s/password_here/zhongruirui_216/&#x27; /var/www/html/wp-blog/wp-config.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- wp:heading &#123;&quot;level&quot;:3&#125; --&gt;</span><br><span class="line">&lt;h3&gt;1.Problem Description&lt;/h3&gt;</span><br><span class="line">&lt;!-- /wp:heading --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:paragraph --&gt;</span><br><span class="line">&lt;p&gt;systemctl(service)启动MySQL时, Centos检测不到指令&lt;/p&gt;</span><br><span class="line">&lt;!-- /wp:paragraph --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:code --&gt;</span><br><span class="line">&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;# 输入：</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line">service mysqld start</span><br><span class="line">service mysqld status</span><br><span class="line"># 报错：</span><br><span class="line">Unit mysqld.service could not be found.&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;!-- /wp:code --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:heading &#123;&quot;level&quot;:3&#125; --&gt;</span><br><span class="line">&lt;h3&gt;2.确定是否配置环境变量&lt;/h3&gt;</span><br><span class="line">&lt;!-- /wp:heading --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:code --&gt;</span><br><span class="line">&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;export PATH=$PATH:/opt/mysql/mysql8/bin</span><br><span class="line">source /etc/profile&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;!-- /wp:code --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:heading &#123;&quot;level&quot;:3&#125; --&gt;</span><br><span class="line">&lt;h3&gt; 3.修改启动路径 &lt;/h3&gt;</span><br><span class="line">&lt;!-- /wp:heading --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:paragraph --&gt;</span><br><span class="line">&lt;p&gt; /opt/mysql/mysql8/support-files/mysql.server 和 /etc/init.d/mysqld 中对应的basedir, datadir等有误，修改为如下： &lt;/p&gt;</span><br><span class="line">&lt;!-- /wp:paragraph --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:code --&gt;</span><br><span class="line">&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;vi /opt/mysql/mysql8/support-files/mysql.server</span><br><span class="line">vi /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line"># Set some defaults</span><br><span class="line">mysqld_pid_file_path=</span><br><span class="line">if test -z &quot;$basedir&quot;</span><br><span class="line">then</span><br><span class="line">  basedir=/opt/mysql/mysql8</span><br><span class="line">  bindir=/opt/mysql/mysql8/bin</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=/opt/mysql/mysql8/datas/mysql</span><br><span class="line">  fi</span><br><span class="line">  sbindir=/opt/mysql/mysql8/bin</span><br><span class="line">  libexecdir=/opt/mysql/mysql8/bin</span><br><span class="line">else</span><br><span class="line">  bindir=&quot;$basedir/bin&quot;</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=&quot;$basedir/data&quot;</span><br><span class="line">  fi</span><br><span class="line">  sbindir=&quot;$basedir/sbin&quot;</span><br><span class="line">  libexecdir=&quot;$basedir/libexec&quot;</span><br><span class="line">fi&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;!-- /wp:code --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:heading &#123;&quot;level&quot;:3&#125; --&gt;</span><br><span class="line">&lt;h3&gt;4.配置systemctl管理mysql需要在/etc/init.d下布置mysqld&lt;/h3&gt;</span><br><span class="line">&lt;!-- /wp:heading --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:code --&gt;</span><br><span class="line">&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;cp /opt/mysql/mysql8/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/mysqld # 赋予权限</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">&lt;!-- /wp:code --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- wp:paragraph --&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;!-- /wp:paragraph --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-MySQL-ERROR-1067-42000-Invalid-default-value-for-‘OUT-TIME’"><a href="#2-5-MySQL-ERROR-1067-42000-Invalid-default-value-for-‘OUT-TIME’" class="headerlink" title="2.5 MySQL :ERROR 1067 (42000): Invalid default value for ‘OUT_TIME’"></a>2.5 MySQL :ERROR 1067 (42000): Invalid default value for ‘OUT_TIME’</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;sql_mode&#x27;;</span><br><span class="line"></span><br><span class="line">set session sql_mode=&#x27;ONLY_FULL_GROUP_BY,NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-ERROR-2003-HY000-Can’t-connect-to-MySQL-server-on-‘116-62-236-132-3306’"><a href="#2-6-ERROR-2003-HY000-Can’t-connect-to-MySQL-server-on-‘116-62-236-132-3306’" class="headerlink" title="2.6 ERROR 2003 (HY000): Can’t connect to MySQL server on ‘116.62.236.132:3306’"></a>2.6 ERROR 2003 (HY000): Can’t connect to MySQL server on ‘116.62.236.132:3306’</h3><p>退出centos后连接不上mysql，报错。可能是没有启动Mysql，需要把Mysql设置为开机默认启动；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /home/cjxjy/mysql/mysql8/support-files/mysql.server</span><br><span class="line">vi /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">vi /home/mysql/mysql8/support-files/mysql.server</span><br><span class="line">vi /opt/mysql/mysql8/support-files/mysql.server</span><br><span class="line"></span><br><span class="line"># Set some defaults</span><br><span class="line">mysqld_pid_file_path=</span><br><span class="line">if test -z &quot;$basedir&quot;</span><br><span class="line">then</span><br><span class="line">  basedir=/opt/mysql/mysql8</span><br><span class="line">  bindir=/opt/mysql/mysql8/bin</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=/opt/mysql/mysql8/datas/mysql</span><br><span class="line">  fi</span><br><span class="line">  sbindir=/opt/mysql/mysql8/bin</span><br><span class="line">  libexecdir=/opt/mysql/mysql8/bin</span><br><span class="line">else</span><br><span class="line">  bindir=&quot;$basedir/bin&quot;</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=&quot;$basedir/data&quot;</span><br><span class="line">  fi</span><br><span class="line">  sbindir=&quot;$basedir/sbin&quot;</span><br><span class="line">  libexecdir=&quot;$basedir/libexec&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Set some defaults</span><br><span class="line">mysqld_pid_file_path=</span><br><span class="line">if test -z &quot;$basedir&quot;</span><br><span class="line">then</span><br><span class="line">  basedir=/opt/mysql/mysql8</span><br><span class="line">  bindir=/opt/mysql/mysql8/bin</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=/opt/mysql/mysql8/datas/mysql</span><br><span class="line">  fi</span><br><span class="line">  sbindir=/opt/mysql/mysql8/bin</span><br><span class="line">  libexecdir=/opt/mysql/mysql8/bin</span><br><span class="line">else</span><br><span class="line">  bindir=&quot;$basedir/bin&quot;</span><br><span class="line">  if test -z &quot;$datadir&quot;</span><br><span class="line">  then</span><br><span class="line">    datadir=&quot;$basedir/data&quot;</span><br><span class="line">  fi</span><br><span class="line">  sbindir=&quot;$basedir/sbin&quot;</span><br><span class="line">  libexecdir=&quot;$basedir/libexec&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp //home/cjxjy/mysql/mysql8/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">cp //opt/mysql/mysql8/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">cp //home/mysql/mysql8/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-7-GPG验证检查报错"><a href="#2-7-GPG验证检查报错" class="headerlink" title="2.7 GPG验证检查报错"></a>2.7 GPG验证检查报错</h3><p>禁掉GPG验证检查，重新安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server --nogpgcheck </span><br><span class="line"></span><br><span class="line">#末尾加上--nogpgcheck </span><br></pre></td></tr></table></figure>

<h2 id="3-常用指令"><a href="#3-常用指令" class="headerlink" title="3. 常用指令"></a>3. 常用指令</h2><h3 id="1-操作表-DDL"><a href="#1-操作表-DDL" class="headerlink" title="1.操作表(DDL)"></a>1.操作表(DDL)</h3><h4 id="1-修改表名"><a href="#1-修改表名" class="headerlink" title="1.修改表名"></a>1.修改表名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure>

<h4 id="2-新增-x2F-删除表中的列"><a href="#2-新增-x2F-删除表中的列" class="headerlink" title="2.新增&#x2F;删除表中的列"></a>2.新增&#x2F;删除表中的列</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD/DROP 字段名;</span><br></pre></td></tr></table></figure>

<h4 id="3-更改表中字段名及类型"><a href="#3-更改表中字段名及类型" class="headerlink" title="3.更改表中字段名及类型"></a>3.更改表中字段名及类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 字段名类型；</span><br></pre></td></tr></table></figure>



<h3 id="2-管理表-DML"><a href="#2-管理表-DML" class="headerlink" title="2.管理表(DML)"></a>2.管理表(DML)</h3><h3 id="2-1-添加数据"><a href="#2-1-添加数据" class="headerlink" title="2.1 添加数据"></a>2.1 添加数据</h3><h4 id="1-给指定列添加数据"><a href="#1-给指定列添加数据" class="headerlink" title="1.给指定列添加数据"></a>1.给指定列添加数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 (列名1, 列名2, ...) VALUES(值1, 值2, ...);</span><br></pre></td></tr></table></figure>

<h4 id="2-给全部列添加数据"><a href="#2-给全部列添加数据" class="headerlink" title="2.给全部列添加数据"></a>2.给全部列添加数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES(值1, 值2, ...);</span><br></pre></td></tr></table></figure>

<h4 id="3-批量添加数据"><a href="#3-批量添加数据" class="headerlink" title="3.批量添加数据"></a>3.批量添加数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 (列名1, 列名2, ...) VALUES(值1, 值2, ...),(值1, 值2, ...),(值1, 值2, ...)...;</span><br><span class="line">INSERT INTO 表名 VALUES(值1, 值2, ...),(值1, 值2, ...),(值1, 值2, ...)...;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-修改数据"><a href="#2-2-修改数据" class="headerlink" title="2.2 修改数据"></a>2.2 修改数据</h3><h4 id="1-修改表数据"><a href="#1-修改表数据" class="headerlink" title="1.修改表数据"></a>1.修改表数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 SET 列名1=值1,列名2=值2,... [WHERE 条件];</span><br></pre></td></tr></table></figure>

<h3 id="2-3-删除数据"><a href="#2-3-删除数据" class="headerlink" title="2.3 删除数据"></a>2.3 删除数据</h3><h4 id="1-删除表数据"><a href="#1-删除表数据" class="headerlink" title="1.删除表数据"></a>1.删除表数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE 条件];</span><br><span class="line"></span><br><span class="line">DELETE e FROM tablemanger e WHERE e.TABLE_SCHEMA = &#x27;information_schema&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="3-查询表-DQL"><a href="#3-查询表-DQL" class="headerlink" title="3.查询表(DQL)"></a>3.查询表(DQL)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 </span><br><span class="line">FROM 表名列表 </span><br><span class="line">WHERE 条件列表 </span><br><span class="line">GROUP BY 分组字段 </span><br><span class="line">HAVING 分组后条件 </span><br><span class="line">ORDER BY 排序字段 </span><br><span class="line">LIMIT 分页限定</span><br></pre></td></tr></table></figure>

<h3 id="3-1-基础查询"><a href="#3-1-基础查询" class="headerlink" title="3.1 基础查询"></a>3.1 基础查询</h3><h4 id="1-查询多个字段"><a href="#1-查询多个字段" class="headerlink" title="1.查询多个字段"></a>1.查询多个字段</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名;</span><br><span class="line">SELECT * FROM 表名;</span><br></pre></td></tr></table></figure>

<h4 id="2-去除重复记录"><a href="#2-去除重复记录" class="headerlink" title="2.去除重复记录"></a>2.去除重复记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure>

<h4 id="3-起别名"><a href="#3-起别名" class="headerlink" title="3.起别名"></a>3.起别名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AS: AS 也可省略</span><br><span class="line">SELECT name, math 数学成绩, english as 英语成绩 from stu;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-条件查询-WHERE"><a href="#3-2-条件查询-WHERE" class="headerlink" title="3.2 条件查询 (WHERE)"></a>3.2 条件查询 (WHERE)</h3><h4 id="1-条件查询语法"><a href="#1-条件查询语法" class="headerlink" title="1.条件查询语法"></a>1.条件查询语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表;</span><br></pre></td></tr></table></figure>

<img src="assets/image-20230227144610476.png" alt="image-20230227144610476" style="zoom: 67%;" />



<h3 id="3-3-排序查询-ORDER-BY"><a href="#3-3-排序查询-ORDER-BY" class="headerlink" title="3.3 排序查询 (ORDER BY )"></a>3.3 排序查询 (ORDER BY )</h3><h4 id="1-排序查询语法"><a href="#1-排序查询语法" class="headerlink" title="1.排序查询语法"></a>1.排序查询语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1], 排序字段名2 [排序方式2] ...;</span><br></pre></td></tr></table></figure>

<p><strong>排序方式：</strong></p>
<ul>
<li>ASC: 升序排列 (默认值)</li>
<li>DESC: 降序排列</li>
</ul>
<p><em>注意：如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</em></p>
<h3 id="3-4-分组查询-GROUP-BY"><a href="#3-4-分组查询-GROUP-BY" class="headerlink" title="3.4 分组查询 (GROUP BY)"></a>3.4 分组查询 (GROUP BY)</h3><h4 id="1-聚合函数"><a href="#1-聚合函数" class="headerlink" title="1.聚合函数"></a>1.聚合函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 聚合函数名(列名) FROM 表名;</span><br></pre></td></tr></table></figure>

<p><em>注意：值为NULL不参与所有聚合函数运算</em></p>
<img src="assets/image-20230227145859870.png" alt="image-20230227145859870" style="zoom:80%;" />

<h4 id="2-分组查询语法"><a href="#2-分组查询语法" class="headerlink" title="2.分组查询语法"></a>2.分组查询语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名[WHERE 分组前条件限定] GROUP BY 分组字段名 [HAVING 分组后条件过滤];</span><br></pre></td></tr></table></figure>

<p><em>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</em></p>
<p>where 和 having 的区别：</p>
<ul>
<li>执行时机不一样: where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进项过滤</li>
<li>可判断的条件不一样: where 不能对聚合函数进行判断，having可以</li>
</ul>
<p>执行顺序： where &gt; 聚合函数 &gt; having</p>
<h3 id="3-5-分页查询-LIMIT"><a href="#3-5-分页查询-LIMIT" class="headerlink" title="3.5 分页查询 (LIMIT)"></a>3.5 分页查询 (LIMIT)</h3><h4 id="1-分页查询语法"><a href="#1-分页查询语法" class="headerlink" title="1.分页查询语法"></a>1.分页查询语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询条目数;</span><br></pre></td></tr></table></figure>

<p>起始索引：从0开始</p>
<p>计算公式：起始索引 &#x3D; (当前页码-1) * 每页显示的条数</p>
<p>Tips：</p>
<ul>
<li>分页查询limit是MySQL数据库的方言</li>
<li>Oracle分页查询使用 rownumber</li>
<li>SQL server分页查询用top</li>
</ul>
<h3 id="4-杂"><a href="#4-杂" class="headerlink" title="4.杂"></a>4.杂</h3><h4 id="1-连接本地数据库"><a href="#1-连接本地数据库" class="headerlink" title="1.连接本地数据库"></a>1.连接本地数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p(密码)；</span><br></pre></td></tr></table></figure>

<h4 id="2-连接远程数据库"><a href="#2-连接远程数据库" class="headerlink" title="2.连接远程数据库"></a>2.连接远程数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h(ip地址) -P(端口) -u(用户名) -p(密码)</span><br></pre></td></tr></table></figure>

<h4 id="3-查询数据库"><a href="#3-查询数据库" class="headerlink" title="3.查询数据库"></a>3.查询数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<h4 id="4-选中数据库"><a href="#4-选中数据库" class="headerlink" title="4.选中数据库"></a>4.选中数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use database 库名;</span><br></pre></td></tr></table></figure>

<h4 id="5-查询表"><a href="#5-查询表" class="headerlink" title="5.查询表"></a>5.查询表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<h4 id="6-查询表构成"><a href="#6-查询表构成" class="headerlink" title="6.查询表构成"></a>6.查询表构成</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">describe table 表名;</span><br></pre></td></tr></table></figure>

<h4 id="7-根据表名查询创建语句"><a href="#7-根据表名查询创建语句" class="headerlink" title="7.根据表名查询创建语句"></a>7.根据表名查询创建语句</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure>

<h4 id="8-删除表"><a href="#8-删除表" class="headerlink" title="8.删除表"></a>8.删除表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 表名；</span><br></pre></td></tr></table></figure>

<h4 id="9-设置自增主键"><a href="#9-设置自增主键" class="headerlink" title="9.设置自增主键"></a>9.设置自增主键</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table urm_area_record add id bigint primary key auto_increment COMMENT &#x27;主键&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="10-查询重复字段"><a href="#10-查询重复字段" class="headerlink" title="10.查询重复字段"></a>10.查询重复字段</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段名,count(*) as count from 表名 group by 字段名 having count&gt;1;</span><br><span class="line">select vin,count(*) as count from v_pass_record group by vin having count&gt;1;</span><br><span class="line">select vin,count(*) as count from v_pass_record where site = &#x27;合格证&#x27; group by vin having count&gt;1;</span><br><span class="line"></span><br><span class="line">select sc_cb_id,count(*) as count from sc_car_baseinfo_two group by sc_cb_id having count&gt;1;</span><br></pre></td></tr></table></figure>

<h4 id="11-删除重复字段"><a href="#11-删除重复字段" class="headerlink" title="11. 删除重复字段"></a>11. 删除重复字段</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE</span><br><span class="line">e</span><br><span class="line">FROM</span><br><span class="line">tbl_employee e</span><br><span class="line">WHERE e.id NOT IN (</span><br><span class="line">	SELECT IFNULL(MIN(id),e.id)</span><br><span class="line">	FROM (</span><br><span class="line">		SELECT min(id) id,d.last_name</span><br><span class="line">		FROM tbl_employee d</span><br><span class="line">		GROUP BY d.last_name </span><br><span class="line">		HAVING COUNT(1)&gt;1</span><br><span class="line">	) as b</span><br><span class="line">	WHERE e.last_name = b.last_name</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">DELETE</span><br><span class="line">e</span><br><span class="line">FROM</span><br><span class="line">sc_car_baseinfo_two e</span><br><span class="line">WHERE e.id NOT IN (</span><br><span class="line">	SELECT IFNULL(MIN(id),e.id)</span><br><span class="line">	FROM (</span><br><span class="line">		SELECT min(id) id,d.last_name</span><br><span class="line">		FROM sc_car_baseinfo_two d</span><br><span class="line">		GROUP BY d.last_name </span><br><span class="line">		HAVING COUNT(1)&gt;1</span><br><span class="line">	) as b</span><br><span class="line">	WHERE e.last_name = b.last_name</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="12-字段排序规则设置"><a href="#12-字段排序规则设置" class="headerlink" title="12. 字段排序规则设置"></a>12. 字段排序规则设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>mysql</tag>
        <tag>software setup</tag>
        <tag>Instructions</tag>
      </tags>
  </entry>
  <entry>
    <title>Integer Programming</title>
    <url>/2023/05/26/Integer-Programming/</url>
    <content><![CDATA[<h2 id="1-分支定界法-Branch-and-Bound-Algorithm-B-amp-B"><a href="#1-分支定界法-Branch-and-Bound-Algorithm-B-amp-B" class="headerlink" title="1 分支定界法 (Branch and Bound Algorithm, B&amp;B)"></a>1 分支定界法 (Branch and Bound Algorithm, B&amp;B)</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>整数规划的精确算法框架中最核心的便是B&amp;B，以及增加分支定界效率的各种技巧，例如<em>割平面方法</em>（<em>Cutting Planes Method</em>）等。假设是求解目标函数最小化的问题，它的核心思想便是把这个NP难的问题<em>分解成求解一个个的线性规划（LP）问题</em>（每个LP问题是多项式时间可解），并且在求解的过程中实时追踪原问题的上界（<em>最优可行解</em>）和下界（<em>最优线性松弛解</em>）。我们先看个简单的例子以便理解。<br>$$<br>\begin{aligned}<br>\min &amp; x_1 + 3 x_2 - x_3 + 2 x_4 - x_5 , \<br>s.t. \quad &amp; x_1 + x_2 - x_5 \geq 5 , \<br>&amp; x_1 - x_3 + x_4 \geq 1 , \<br>&amp;x_1 \dots x_4 \quad is \quad {0,1}, \<br>&amp;x_5 \geq 0</p>
<p>\end{aligned}<br>$$<br><img src="/../images/optimization/10.png"></p>
<p>这里假设有4个{0,1}变量，x1..x4，以及1个连续变量x5。图中最顶上的点叫<strong>Root Node</strong>，通过把整数变量x1..x4<em>线性松弛(Linear Relaxation)<em>，例如这里松弛成[0,1]区间内的连续变量，然后求解相应的松弛后的线性规划问题</em></em>(Linear Relaxation Problem)。求解该LRP问题所得的解（通常对于原问题来说是不可行的，因为x1..x4可能是小数），这个解便是该问题的<em>第一个下界（Lower Bound</em>）。</p>
<p>为什么是下界呢？对于一个最小化问题，因为通过把{0,1}变量松弛成[0,1]，等于增加了可行解的个数（可行域的范围），这样该最小化问题就有可能得到比原问题更好（小）的解，因此松弛后的问题求得的解是原问题的下界（Lower Bound）。</p>
<p>事实上，图中每一个点，都是一个松弛后的线性规划（LRP）问题的解。由于被松弛成了[0,1]间的连续变量，因此原问题中应属于{0,1}的自变量，例如x1，通过求解线性规划，得到的解可能是0.4，显然不满足原问题的条件。这时候，我们就需要做<em>分支（Branch）</em>,例如对Root Node做左右俩个分支，左边的分支可以是x1&#x3D;0，右边的分支是x1&#x3D;1。分支的意思，可以理解为在原本Root Node的LRP基础上，加上一个x&#x3D;0或1的约束条件。这样，通过加上这个约束条件，再解该问题，x1就必定等于0或1，x1也便是可行的。当然剩余的自变量x2..x4，由于没有类似的整数约束，还有可能是小数，因此我们还需要更多的分支。</p>
<p>上图4个{0,1}变量，最坏的情况需要2^4次分支，也就是求解16个线性规划问题。那么图中红色的部分是什么意思呢？</p>
<p>在接下来的分支里，如果求解一个Node的LRP的解是大于上界4的，例如4.5。那么这个时候，虽然我们还没找到这个点其下分支可能的可行解，但是如果继续对这个点进行分支，由于分支代表增加更多的约束，减少了可行解的个数，以后求得的解只会比4.5来得更差（大）。因此，从优化的角度，我们不可能从这个点以后的分支中找到比目前上界4更优的解，因此没有必要对4.5这个点继续再做分支，可以直接<em>删（Prune）掉</em>，也就是图中红色的区域。</p>
<p>这就是分支定界里<em>定界</em>的重要性，它使得你不需要求解所有2^n个LRP问题，因为很多Node及其下面的分支，都被Prune了。</p>
<p>Prune情况一：下界大于上界</p>
<p>Prune情况二：该Node的LRP问题无解（Infeasible）。</p>
<p>参考课件：<br><a href="https://studentnet.cs.manchester.ac.uk/pgt/2014/COMP60342/COMP60342-2015-lec4.BranchandBound.pdf">COMP60342-2015-lec4.BranchandBound.pdf (manchester.ac.uk)</a></p>
<h3 id="1-2-“收敛性”"><a href="#1-2-“收敛性”" class="headerlink" title="1.2 “收敛性”"></a>1.2 “收敛性”</h3><p>这里的收敛不是分析意义上的收敛，而是算法、计算意义上的。上面我们提到分支定界法存在上界和下界，并且随着一个个Node LRP问题的求解，不断进行着更新。每当求得一个原问题的可行解（混合整数解），如果这个解的目标函数小于当前的最优可行解，那么就对上界进行更新。下界更新方式类似。</p>
<p>分支定界法是一个**迭代算法(Iteration Algorithm)**，每次迭代都在求解LRP问题，收敛的准则是计算意义上的，例如可以设置当上界和下界非常接近（0.001）时，结束迭代。</p>
<p>然而比起绝对差值更为流行的，是相对差值，也即分支定界法的Gap。它的计算方法，（上界-下界）&#x2F;上界。</p>
<p>通常我们设置Gap &lt; 0.1%，就可把当前的最优可行解（上界）理解为该问题的全局最优解了，分支定界法随即<strong>终止（Terminate）</strong>。</p>
<h3 id="1-3-处理技巧"><a href="#1-3-处理技巧" class="headerlink" title="1.3 处理技巧"></a>1.3 处理技巧</h3><h4 id="1-3-1-割平面方法-Branch-and-Cut-–-UserCut"><a href="#1-3-1-割平面方法-Branch-and-Cut-–-UserCut" class="headerlink" title="1.3.1 割平面方法(Branch-and-Cut) – UserCut"></a>1.3.1 割平面方法(Branch-and-Cut) – UserCut</h4><p>整数规划中的割平面方法，大致分为砍掉实数解的分割（cut，即一个线性不等式）和砍掉整数解的分割。前者对于原问题是一个valid inequality，而后者不是。<br><img src="/../images/optimization/11.png"><br>如上图，有这么一个整数规划问题，黑色线段是线性不等式，蓝色的点是离散的可行域，蓝色线段包围的空间是IP Hull（整数解形成的凸包，NP-hard to find，因为一旦找到，那么求解整数规划只需要求解凸包这个LP问题），在其外面黑色线段的包围是LP Hull（线性松弛解形成的凸包）。</p>
<p>正是因为IP Hull和LP Hull中间的间隙，使得该LP的最优解是fractional（对于原问题infeasible）的，而这段间隙，对于LP（线性规划）来讲，是多余的搜索空间。如果我们在这个时候可以加上一个或多个线性不等式（cut），把无用空间完全“砍”掉，那么LP Hull &#x3D; IP Hull，这时我们就得到整数解了。</p>
<p>当然一般情况没有这么好运，可以把无用空间完全砍掉。如上图，加上红色虚线这个cut，我们砍掉了红色阴影区域这部分无用空间。虽然没有把LP Hull直接缩小成IP Hull这么立竿见影，但对于求解原问题，由于减少了搜索空间，也是一种效率上的提升。</p>
<p>另外值得注意的是，红色虚线的cut，对于原问题（IP Hull）也是满足的（valid），它砍掉的，只是实数部分无用的搜索空间。</p>
<p>最后我们想象上图是分支定界法求解到其中一个node所解得的线性松弛解，那么如果该步骤在分支定界法所有（或部分）node上不断重复（recall that一个0-1规划每一次branch就等价于求解俩个LP问题，每个LP问题都是一个node），该方法就被称为Branch-and-Cut。</p>
<p>而以上cut，在Cplex等优化求解器中，被称为UserCut。</p>
<h4 id="1-3-2-割平面方法–LazyCut"><a href="#1-3-2-割平面方法–LazyCut" class="headerlink" title="1.3.2 割平面方法–LazyCut"></a>1.3.2 割平面方法–LazyCut</h4><p><img src="/../images/optimization/12.png"><br>上一节讲了砍掉实数解的cut，这一节我们讲讲砍掉整数解（feasible solution）的cut–LazyCut。</p>
<p>如上图，我们有IP hull和LP hull，我们加上一个Lazy Constraints，这时候把顶上三个原问题的可行整数解也砍掉了。</p>
<p>为什么要把原问题可行的整数解也cut掉呢？适用范围有哪些呢？</p>
<p>割平面法最经典的应用，莫过于Travelling Salesman Problem（我老板的成名作）了。这个问题是每个学运筹学特别是组合优化必学的经典问题。</p>
<p>而这个问题求解的关键，便是割平面方法– the subtour elimination constraints.</p>
<p><img src="/../images/optimization/13.png"><br>如上图，TSP需要找从一点出发，遍历所有城市（1-6点）再回到出发点的cycle（回路）。为了简化问题，在master problem（初始问题）的表达式中，我们忽略subtour（小的cycle，例如上图4-5-6）约束（因为有指数级个数该约束），然后求解该IP问题。</p>
<p>忽略掉subtour求得的IP问题虽然是整数可行解，但是其中可能存在subtour（如上图俩个subtour），因此其实并不是我们想要的解。这时候，我们设计一个启发式算法，来探测这些subtour，然后加上相应的cut砍掉这些subtour对应的整数解，然后再次求解IP。</p>
<p>由此循环，直到求得的IP整数解中，不再存在subtour，这时候我们找到了最终问题的全局最优解。</p>
<h2 id="2-启发式-x2F-近似算法-Heuristic-x2F-Approximation-Algorithms"><a href="#2-启发式-x2F-近似算法-Heuristic-x2F-Approximation-Algorithms" class="headerlink" title="2 启发式&#x2F;近似算法(Heuristic&#x2F;Approximation Algorithms)"></a>2 启发式&#x2F;近似算法(Heuristic&#x2F;Approximation Algorithms)</h2><p>作为研究世界上最难问题的学者，想出了解决整数规划问题的各种其他途径，例如近似算法（Approximation Algorithms），启发式算法（Heuristic Algorithms），遗传算法（Generic Algorithm），Evolutionary Algorithms等等。它们虽然不能求得整数规划的最优解，但是却能在短时间（通常多项式时间）内给出一个较好的可行解。</p>
<p>启发式算法，通常采用<strong>贪心算法（Greedy Algorithm）</strong>，所得的解通常只是局部最优解，并且完全没有概念这个解到底有多“好”。</p>
<p>近似算法，与启发式算法不一样，算法往往通过非常巧妙的设计，计算所得的解可以用严格的数学证明是“比较好”的，即所谓的<strong>近似率（Approximation Ratio）,R</strong>。也就是说，近似算法所得的解，可以被证明是全局最优解的R倍之内。这样该算法所得的解被认为是有保证的。</p>
]]></content>
      <categories>
        <category>Optimization</category>
      </categories>
      <tags>
        <tag>optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Operations Research Concept</title>
    <url>/2023/05/26/Operations-Research-Concept/</url>
    <content><![CDATA[<h2 id="1-运筹学分类"><a href="#1-运筹学分类" class="headerlink" title="1 运筹学分类"></a>1 运筹学分类</h2><ul>
<li><strong>线性规划</strong>（Linear Programming）– 最简单和基础的优化问题，如上图，<em>目标函数</em>（max）和<em>约束条件</em>（s.t.）都是线性的，自变量x是实数变量，P问题（多项式时间可解）；或许有些读者没有学过线性代数，更简单的例子： min x1+x2 s.t. 3x1-4x2&gt; 5, x1,x2&gt;&#x3D;0。</li>
<li><strong>非线性规划</strong> (Nonlinear Programming)–目标函数或约束条件为非线性，例如2次函数；</li>
<li><strong>凸优化</strong> (Convex Optimization)–约束条件形成的可行域（feasible region）是凸的；</li>
<li><strong>（混合）整数规划</strong> (Mixed Integer Programming)–自变量有整数变量，NP难问题（指数级算法复杂度）。</li>
<li><strong>半正定规划</strong> (Semi-definite Programming)–每一个自变量x代表一个矩阵；</li>
<li><strong>网络流问题</strong>（Network Flow Problems）–一个特殊的混合整数规划问题，满足一个节点流出流量&#x3D;流入流（或许你听说过最大流最小割定理）；</li>
<li><strong>动态规划</strong>(Dynamic Programming)、<strong>近似算法</strong>(Approximation Algorithms)<strong>、启发式算法</strong>（Heuristic Algorithms， Meta Heuristics）、<strong>遗传算法</strong> (Genetic Algorithms)–用来解例如整数规划等NP难优化问题的算法，后俩个通常只能得到局部最优解，最经典的当属最大流最小割定理衍生出来的一些最大流算法（全局最优）。被广泛得用在各个学科和领域，如人工智能；</li>
<li><strong>鲁棒优化</strong>（Robust Optimization）–目标函数或约束条件有扰动（不确定性）的情况下，求解其最坏情况下的最优解；</li>
<li><strong>多目标优化</strong> (Muti-objective Optimization)–优化的目标函数是一个向量，通常通过引入权重权衡个目标函数，转化成单目标优化，或者寻找<strong>帕累托最优</strong>(Pareto Optimality) ；</li>
<li><strong>双层优化</strong>（Bilevel Optimization）–和复合函数的概念类似，比如Max-Min Problem,在一个优化问题外嵌套另一个优化问题，通常用迭代法；</li>
<li><strong>随机优化</strong>（Stochastic Programming）–加入了不确定的因素（通常以概率形式表现，目标函数变成求期望最大化）；</li>
<li><strong>最优控制</strong>（Optimal Control）：严格说属于控制论的范畴，可以简单地把它理解为，优化问题中的变量由x变为f(x)，并且通常f是时间t的函数（或者状态state的函数），约束条件常有偏微分方程。也就是说，控制论期望通过解一个优化问题，得到一个最优的函数f（t），使得这个函数在全局（空间+时间）上是最优的。而运筹学通过解一个优化问题，得到的是最优解x，使得目标函数在一个确定性（deterministic，通常与t无关，或者可以理解为在t的某一时刻）的环境下是最优的。</li>
</ul>
<h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2 基本概念"></a>2 基本概念</h2><h3 id="2-1-算法复杂度"><a href="#2-1-算法复杂度" class="headerlink" title="2.1 算法复杂度"></a>2.1 算法复杂度</h3><p>如果某个算法的复杂度可以表示为$O(n^k)$，即问题规模n出现在底数的位置，这种复杂度称为多项式时间复杂度；</p>
<p>如果某个算法的复杂度表示为$O(k^n) or O(n!)$，这种复杂度称为指数型时间复杂度。</p>
<p>相同问题规模下（同时这个问题规模不是太小），指数型时间复杂度远远大于多项式时间复杂度。</p>
<p>当我们在解决一个问题时，我们选择的算法通常都需要是多项式时间复杂度的，指数型时间复杂度的算法是计算机所不能承受的（除非问题规模很小）。</p>
<p>一般情况下，求解整数规划的精确解（全局最优）是NP难的，简单地说，也就是只存在指数级算法复杂度（Exponential Time Solvable）。</p>
<p>怎么来理解指数级复杂度呢？假设这里的整数变量是{0,1}变量，那么我们可以简单地理解为算法复杂度至少是O(2^n)（需要解2^n个线性规划问题，其中n是整数变量的个数）。其中线性规划被认为是可以较为高效求解的，其复杂度是多项式时间的（O(n^k)，其中k是常数，注意这里n在底数上）。</p>
<p>也就是说，每增加一个整数变量，求解其精确解的运算速度最坏情况下就要增加一倍！例如求解n&#x3D;100的整数规划问题需要1小时，那么求解n&#x3D;101的规模可能会需要2小时，n&#x3D;102需要4小时，n&#x3D;105需要32小时。。这就是<strong>指数爆炸</strong>！</p>
<p>因此，整数规划问题被看作数学规划里、乃至世界上最难的问题之一，被很多其他领域（例如机器学习）认为是不可追踪（Intractable）的问题–也就是他们直接放弃治疗了，从不考虑直接求解该问题的精确解，而是退而求其次求解<strong>近似解或局部最优解</strong>。</p>
<h3 id="2-2-P、NP、NP-Complete、NP-Hard问题"><a href="#2-2-P、NP、NP-Complete、NP-Hard问题" class="headerlink" title="2.2 P、NP、NP-Complete、NP-Hard问题"></a>2.2 P、NP、NP-Complete、NP-Hard问题</h3><ol>
<li><p><strong>P问题</strong>：有多项式时间算法，算得很快的问题。<br> 存在多项式时间算法的问题。(P：polynominal，多项式)。我们为什么要研究这个P类问题呢？当计算机处理的数据达到100万个的时候，时间复杂度分别为$O(n^2)$和$O(e^n)$的算法，运行时间简直就是天壤之别。所以我们才要研究一个问题是否具有多项式时间的算法。</p>
</li>
<li><p><strong>NP问题</strong>：算起来不确定快不快的问题，但是我们可以快速验证这个问题的解。<br> 能在多项式时间内验证得出一个正确解的问题。(NP:Nondeterministic polynominal，非确定性多项式)。</p>
<p> 这里可以清楚的看出<strong>P类问题是NP类问题的子集</strong>（即存在多项式时间算法的问题，总能在多项式时间内验证它）个人理解NP类问题就是，不知道这个问题存不存在一个多项式时间的算法，所以叫非确定性（non-deterministic）。</p>
<p> 但是我们可以在多项式时间内验证并得出这个问题的一个正确解。举个例子：著名的NP类问题：旅行家推销问题(TSP)。即有一个推销员，要到n个城市推销商品，他要找出一个包含所有n个城市的环路，这个环路路径小于a。我们知道这个问题如果单纯的用枚举法来列举的话会有(n-1)! 种，已经不是多项式时间的算法了，(注：阶乘算法比多项式的复杂)。那怎么办呢？我们可以用猜的，假设人品爆炸猜几次就猜中了一条小于长度a的路径，TSP问题解决了，皆大欢喜。可是，我不可能每次都猜的那么准，也许我要猜完所有种方案呢？所以我们说，这是一个NP类问题。也就是，我们能在多项式的时间内验证并得出问题的正确解，可是我们却不知道该问题是否存在一个多项式时间的算法，每次都能解决他(注意，这里是不知道，不是不存在)。</p>
<p> 所以这就引出了这类讨论的一个千年问题：是否 NP类问题&#x3D;P类问题？</p>
<p> 即，是否所有能在多项式时间内验证得出正确解的问题，都是具有多项式时间算法的问题呢？</p>
<p> 为了证明这个千古难题，科学家想出了很多办法。其中之一就是问题的约化。所谓问题约化就是，可以用问题B的算法来解决A ，我们就说问题A可以约化成问题B。举个例子：一元一次方程的求解，跟二元一次方程的求解，我们知道，只要能求解二元一次方程，那就可以用二元一次方程的解法来求解一元一次方程，只需要将一元一次方程加上y，并附加一个方程y&#x3D;0就可以将一元一次方程变形为一个二元一次方程，然后用二元一次方程的解法来求解这个方程。注意，这里二元一次方程的解法会比一元一次的复杂。所以我们说，只需要找到解二元一次方程的规则性解法，那就能用这个规则性解法来求解一元一次方程。从这里也可以看出，约化是具有传递性的，如A约化到B，B约化到C，A就可以约化到C，同时不断约化下去，我们会发现一个很惊人的特性，就是他一定会存在一个最大的问题，而我们只需要解决了这个问题，那其下的所有问题也就解决啦！这就是我们所说的NPC问题的概念！！！</p>
<p> 引到NP问题里就是，对于同一类的所有的NP类问题，若他们都可以在多项式时间内约化成最难的一个NP类问题，（我们直观的认为，被约化成的问题应具有比前一个问题更复杂的时间复杂度）当我们针对这个时间复杂度最高的超级NP问题要是能找到他的多项式时间算法的话，那就等于变向的证明了其下的所有问题都是存在多项式算法的，即NP&#x3D;P！！！！给出NPC问题定义。</p>
</li>
<li><p><strong>NP-complete问题</strong>：属于NP问题，且属于NP-hard问题。<br> 存在这样一个NP问题，所有的NP问题都可以约化成它。换句话说，只要解决了这个问题，那么所有的NP问题都解决了。其定义要满足2个条件：</p>
<p> 首先，它得是一个NP问题；然后，所有的NP问题都可以约化到它。要证明npc问题的思路就是： 先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它。</p>
</li>
<li><p><strong>NP-hard问题</strong>：比NP问题都要难的问题。<br> NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条（就是说，NP-Hard问题要比 NPC问题的范围广，NP-Hard问题没有限定属于NP），即所有的NP问题都能约化到它，但是它不一定是一个NP问题。<br> <img src="/../images/optimization/09.png"></p>
</li>
</ol>
<h2 id="3-回顾"><a href="#3-回顾" class="headerlink" title="3 回顾"></a>3 回顾</h2><h3 id="1-线性规划-linear-Programming"><a href="#1-线性规划-linear-Programming" class="headerlink" title="1 线性规划 (linear Programming)"></a>1 线性规划 (linear Programming)</h3><p><img src="/../images/optimization/01.png"><br>运筹学、数学规划（<strong>Math Programming</strong>）问题的数学表达式，由自变量（<strong>Variables</strong>）、目标函数（<strong>Objective Function</strong>）和约束条件（<strong>Constraints</strong>)组成，所有优化问题本质上都可以化简为由它们组成的数学表达式，然后求解满足约束条件下使得目标函数最大&#x2F;小的变量的值。</p>
<p>如上图，当自变量是连续的，目标函数和不等式是线性的时候，该问题被称为线性规划问题。线性规划因其具有的良好性质（例如，最优解必定出现在极点），可以用单纯型法（<strong>Simplex Method</strong>）或内点算法（<strong>Interior Method</strong>）高效地求解，熟悉算法复杂度的童鞋，知道它是多项式时间可解的（<strong>Polynomial Time Solvable–O（n^k）</strong>）。这里n表示自变量个数。</p>
<p>可行域（<strong>Feasible Set</strong>）：可行解的集合。如下图，阴影区域（多面体、<strong>Polyhedron</strong>）即为三个线性不等式（半平面）组成的可行域。</p>
<p><img src="/../images/optimization/02.png"></p>
<h3 id="2-整数规划-Integer-Programming"><a href="#2-整数规划-Integer-Programming" class="headerlink" title="2 整数规划 (Integer Programming)"></a>2 整数规划 (Integer Programming)</h3><p>整数规划，或者离散优化（<strong>Discrete Optimization</strong>），是指数学规划问题中自变量存在整数。与线性规划连续的可行域不同，整数规划的可行域是离散的。<br><img src="/../images/optimization/03.png"><br>如上图，蓝线依旧代表线性不等式，但是这里x,y被约束成整数变量，因此可行域变成了红线区域内的9个离散的点。</p>
<p><strong>凸包（Convex Hull）</strong>：整数规划所有可行点的凸包围，即图中红线组成的多面体（想象多维的情况）。凸包是未知的，已知的是蓝线的不等式，并且凸包是非常难求解的，或者形成凸包需要指数数量级的线性不等式（图中红线）。如果知道了凸包的所有线性表示，那么整数规划问题就可以等价为求解一个凸包表示的线性规划问题。</p>
<p>另外，除了整数规划，还有混合整数规划（<strong>Mixed Integer Programming, MIP</strong>），即自变量既包含整数也有连续变量。如下图：<br><img src="/../images/optimization/04.png"><br>x是连续的，y被约束成整数变量，这时候可行域变成了4条离散的橘黄色线段+4处的红色整数点（0,4)。课后作业，求图中的凸包。</p>
<p>整数规划的精确算法通常需要用到分支定界法（<strong>Branch and Bound Method</strong>）,以及增加分支定界效率的各种技巧，例如割平面方法（<strong>Cutting Planes Method</strong>）。总的来说，求解整数规划的精确解是NP难的，也就是指数级算法复杂度（<strong>Exponential Time Solvable</strong>）。</p>
<p>怎么来理解指数级复杂度呢？假设这里的整数是0,1变量，那么我们可以简单地理解为算法复杂度是2^n（需要解2^n个线性规划问题）。也就是说，每增加一个0，1变量，求解的速度就有可能要增加一倍！例如求解n&#x3D;100的整数规划问题需要1小时，那么求解n&#x3D;101的规模可能会需要2小时，n&#x3D;102需要4小时，n&#x3D;105需要32小时。。这就是<strong>指数爆炸</strong>！</p>
<p>因此，整数规划问题被看作数学规划里、甚至是<strong>世界上最难的问题</strong>之一，被很多其他领域（例如机器学习）认为是不可追踪（<strong>Intractable</strong>）的问题，也就是他们直接放弃治疗了。</p>
<p>作为研究世界上最难问题的学者，想出了解决整数规划问题的各种其他途径，例如近似算法（<strong>Approximation Algorithms</strong>），启发式算法（<strong>Heuristic Algorithms</strong>），遗传算法（<strong>Evolution Algorithms, Meta-Heuristic</strong>）等等。它们虽然不能求得整数规划的最优解，但是却能在短时间（通常多项式时间）内给出一个较好的可行解</p>
<h3 id="3-组合优化-Combinatorial-Optimization"><a href="#3-组合优化-Combinatorial-Optimization" class="headerlink" title="3 组合优化 (Combinatorial Optimization)"></a>3 组合优化 (Combinatorial Optimization)</h3><p>通俗的讲，我把组合优化理解为，在组合优化种可能性里找出最优的方案。假设自变量为n，用强力搜索法（<em>Brute-force Algorithm</em>）来解组合优化的算法复杂度最坏需要<em>n的阶乘</em>！什么概念？这比指数爆炸还要可怕！</p>
<p>从这个意义上讲，组合优化是整数规划的子集。的确，绝大多数组合优化问题都可以被建模成（混合）整数规划模型来求解。但是似乎学术圈更多地把组合优化与图（<strong>Graph</strong>）优化以及网络流（<strong>Network Flow</strong>）优化联系在一起，并且最终目标不在精确解，而是近似解。</p>
<p>下面给出一个经典的组合优化例子-最大流问题（<strong>Max Flow Problem</strong>）：<br><img src="/../images/optimization/05.png"><br>给定一张图G（V，E），V是点（<strong>Node</strong>）的集合，E是边（<strong>Edge</strong>)的集合。该问题试图从点0到5导流最大的流量，边上的数字代表该条边的最大流量，因此形成了约束条件–每条边的流量不得超过该条边的限额。自然而然地，该问题可以被建模成一个整数规划问题。</p>
<p>我们跳过模型和算法，直观的判断该问题的算法复杂度大概为多少。设想从0出发，有俩种可能线路，0到1以及0到2；从1和2出发，有分别有俩种可能的线路。因此，可以初步判断，改问题如果用强力算法（穷举法），算法复杂度将为指数级！</p>
<p>但是聪明的组合优化学家，把这个看似指数级算法复杂度的问题，用巧妙的算法多项式时间便可求解出最优解。</p>
<h3 id="4-非凸优化-Non-Convex-Optimization"><a href="#4-非凸优化-Non-Convex-Optimization" class="headerlink" title="4 非凸优化 (Non-Convex Optimization)"></a>4 非凸优化 (Non-Convex Optimization)</h3><p>凸（<strong>Convex</strong>） VS 非凸的概念，数学定义就不写了，介绍个直观判断一个集合是否为Convex的方法，如下图：<br><img src="/../images/optimization/06.png"><br>简单的测试一个集合是不是凸的，只要任意取集合中的俩个点并连线，如果说连线段完全被包含在此集合中，那么这个集合就是凸集，例如左图所示。</p>
<p>凸优化有个非常重要的定理，即任何局部最优解即为全局最优解。由于这个性质，只要设计一个较为简单的局部算法，例如贪婪算法（<strong>Greedy Algorithm</strong>）或梯度下降法（<strong>Gradient Decent</strong>），收敛求得的局部最优解即为全局最优。因此求解凸优化问题相对来说是比较高效的。这也是为什么机器学习中凸优化的模型非常多，毕竟机器学习处理大数据，需要高效的算法。</p>
<p>而非凸优化问题被认为是非常难求解的，因为可行域集合可能存在无数个局部最优点，通常求解全局最优的算法复杂度是指数级的（NP难）。如下图：<br><img src="/../images/optimization/07.png"><br>最经典的算法要算蒙特卡罗投点法(<em>Monte Carlo Algorithm</em>)了，大概思想便是随便投个点，然后在附近区域（可以假设convex)用2中方法的进行搜索，得到局部最优值。然后随机再投个点，再找到局部最优点。如此反复，直到满足终止条件。</p>
<h3 id="5-整数规划与非凸优化的关系"><a href="#5-整数规划与非凸优化的关系" class="headerlink" title="5 整数规划与非凸优化的关系"></a>5 整数规划与非凸优化的关系</h3><p>（混合）整数规划被称为极度非凸问题（<strong>highly nonconvex problem</strong>），如下图：<br><img src="/../images/optimization/08.png"><br>实心黑点组成的集合，是一个离散集，按照4中判断一个集合是否为凸集的技巧，我们很容易验证这个离散集是非凸的，并且相比4中的非凸集更甚。因此整数规划问题也是一个非凸优化问题。</p>
<h3 id="6-整数规划、非凸优化的重要性"><a href="#6-整数规划、非凸优化的重要性" class="headerlink" title="6 整数规划、非凸优化的重要性"></a>6 整数规划、非凸优化的重要性</h3><p>对现实社会各行各业问题数学建模的时候，整数变量有时是不可避免的。例如：x辆车，y个人。x，y这里便是整数变量，小数是没有意义的。</p>
<p>决策变量(<strong>Decision Varible</strong>): x&#x3D;{0,1}.  </p>
<p>0&#x2F;1变量被广泛地应用在商业和决策领域。我们假设变量x&#x3D;{0,1}，当x&#x3D;1的时候，我们便可以建模执行x这个决策；x&#x3D;0，则表示不执行。这样引入决策变量x的建模技巧，在工业界案例中屡见不鲜。</p>
<p>从这些案例，<strong>社会是由一个个离散变量组成的</strong>。</p>
<p>说到这里，当然不能否定了凸优化和连续优化的作用，科学的本质便是由简到难，先把简单问题研究透彻，然后把复杂问题简化为求解一个个的简单问题。<em>求解整数规划便是利用分支定界法求解一个个线性规划问题，非凸优化同样如此。</em></p>
]]></content>
      <categories>
        <category>Optimization</category>
      </categories>
      <tags>
        <tag>optimization</tag>
        <tag>concept</tag>
      </tags>
  </entry>
</search>
